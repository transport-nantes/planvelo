(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){module.exports={area:require("@turf/area"),lineDistance:require("@turf/line-distance")}},{"@turf/area":3,"@turf/line-distance":7}],2:[function(require,module,exports){var wgs84=require("wgs84");module.exports.geometry=geometry;module.exports.ring=ringArea;function geometry(_){var area=0,i;switch(_.type){case"Polygon":return polygonArea(_.coordinates);case"MultiPolygon":for(i=0;i<_.coordinates.length;i++){area+=polygonArea(_.coordinates[i])}return area;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(i=0;i<_.geometries.length;i++){area+=geometry(_.geometries[i])}return area}}function polygonArea(coords){var area=0;if(coords&&coords.length>0){area+=Math.abs(ringArea(coords[0]));for(var i=1;i<coords.length;i++){area-=Math.abs(ringArea(coords[i]))}}return area}function ringArea(coords){var p1,p2,p3,lowerIndex,middleIndex,upperIndex,i,area=0,coordsLength=coords.length;if(coordsLength>2){for(i=0;i<coordsLength;i++){if(i===coordsLength-2){lowerIndex=coordsLength-2;middleIndex=coordsLength-1;upperIndex=0}else if(i===coordsLength-1){lowerIndex=coordsLength-1;middleIndex=0;upperIndex=1}else{lowerIndex=i;middleIndex=i+1;upperIndex=i+2}p1=coords[lowerIndex];p2=coords[middleIndex];p3=coords[upperIndex];area+=(rad(p3[0])-rad(p1[0]))*Math.sin(rad(p2[1]))}area=area*wgs84.RADIUS*wgs84.RADIUS/2}return area}function rad(_){return _*Math.PI/180}},{wgs84:8}],3:[function(require,module,exports){var geometryArea=require("@mapbox/geojson-area").geometry;function area(input){if(input.type==="FeatureCollection"){for(var i=0,sum=0;i<input.features.length;i++){if(input.features[i].geometry){sum+=geometryArea(input.features[i].geometry)}}return sum}else if(input.type==="Feature"){return geometryArea(input.geometry)}else{return geometryArea(input)}}module.exports=area},{"@mapbox/geojson-area":2}],4:[function(require,module,exports){var getCoord=require("@turf/invariant").getCoord;var radiansToDistance=require("@turf/helpers").radiansToDistance;module.exports=function(from,to,units){var degrees2radians=Math.PI/180;var coordinates1=getCoord(from);var coordinates2=getCoord(to);var dLat=degrees2radians*(coordinates2[1]-coordinates1[1]);var dLon=degrees2radians*(coordinates2[0]-coordinates1[0]);var lat1=degrees2radians*coordinates1[1];var lat2=degrees2radians*coordinates2[1];var a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);return radiansToDistance(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),units)}},{"@turf/helpers":5,"@turf/invariant":6}],5:[function(require,module,exports){function feature(geometry,properties){return{type:"Feature",properties:properties||{},geometry:geometry}}module.exports.feature=feature;module.exports.point=function(coordinates,properties){if(!Array.isArray(coordinates))throw new Error("Coordinates must be an array");if(coordinates.length<2)throw new Error("Coordinates must be at least 2 numbers long");return feature({type:"Point",coordinates:coordinates.slice()},properties)};module.exports.polygon=function(coordinates,properties){if(!coordinates)throw new Error("No coordinates passed");for(var i=0;i<coordinates.length;i++){var ring=coordinates[i];if(ring.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var j=0;j<ring[ring.length-1].length;j++){if(ring[ring.length-1][j]!==ring[0][j]){throw new Error("First and last Position are not equivalent.")}}}return feature({type:"Polygon",coordinates:coordinates},properties)};module.exports.lineString=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"LineString",coordinates:coordinates},properties)};module.exports.featureCollection=function(features){return{type:"FeatureCollection",features:features}};module.exports.multiLineString=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"MultiLineString",coordinates:coordinates},properties)};module.exports.multiPoint=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"MultiPoint",coordinates:coordinates},properties)};module.exports.multiPolygon=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"MultiPolygon",coordinates:coordinates},properties)};module.exports.geometryCollection=function(geometries,properties){return feature({type:"GeometryCollection",geometries:geometries},properties)};var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373,feet:20908792.65};module.exports.radiansToDistance=function(radians,units){var factor=factors[units||"kilometers"];if(factor===undefined){throw new Error("Invalid unit")}return radians*factor};module.exports.distanceToRadians=function(distance,units){var factor=factors[units||"kilometers"];if(factor===undefined){throw new Error("Invalid unit")}return distance/factor};module.exports.distanceToDegrees=function(distance,units){var factor=factors[units||"kilometers"];if(factor===undefined){throw new Error("Invalid unit")}return distance/factor*57.2958}},{}],6:[function(require,module,exports){function getCoord(obj){if(Array.isArray(obj)&&typeof obj[0]==="number"&&typeof obj[1]==="number"){return obj}else if(obj){if(obj.type==="Feature"&&obj.geometry&&obj.geometry.type==="Point"&&Array.isArray(obj.geometry.coordinates)){return obj.geometry.coordinates}else if(obj.type==="Point"&&Array.isArray(obj.coordinates)){return obj.coordinates}}throw new Error("A coordinate, feature, or point geometry is required")}function geojsonType(value,type,name){if(!type||!name)throw new Error("type and name required");if(!value||value.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)}}function featureOf(feature,type,name){if(!name)throw new Error(".featureOf() requires a name");if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}function collectionOf(featurecollection,type,name){if(!name)throw new Error(".collectionOf() requires a name");if(!featurecollection||featurecollection.type!=="FeatureCollection"){throw new Error("Invalid input to "+name+", FeatureCollection required")}for(var i=0;i<featurecollection.features.length;i++){var feature=featurecollection.features[i];if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}}module.exports.geojsonType=geojsonType;module.exports.collectionOf=collectionOf;module.exports.featureOf=featureOf;module.exports.getCoord=getCoord},{}],7:[function(require,module,exports){var distance=require("@turf/distance");var point=require("@turf/helpers").point;module.exports=function lineDistance(line,units){if(line.type==="FeatureCollection"){return line.features.reduce(function(memo,feature){return memo+lineDistance(feature,units)},0)}var geometry=line.type==="Feature"?line.geometry:line;var d,i;if(geometry.type==="LineString"){return length(geometry.coordinates,units)}else if(geometry.type==="Polygon"||geometry.type==="MultiLineString"){d=0;for(i=0;i<geometry.coordinates.length;i++){d+=length(geometry.coordinates[i],units)}return d}else if(geometry.type==="MultiPolygon"){d=0;for(i=0;i<geometry.coordinates.length;i++){for(var j=0;j<geometry.coordinates[i].length;j++){d+=length(geometry.coordinates[i][j],units)}}return d}else{throw new Error("input must be a LineString, MultiLineString, "+"Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection "+"containing only those types)")}};function length(coords,units){var travelled=0;var prevCoords=point(coords[0]);var curCoords=point(coords[0]);var temp;for(var i=1;i<coords.length;i++){curCoords.geometry.coordinates=coords[i];travelled+=distance(prevCoords,curCoords,units);temp=prevCoords;prevCoords=curCoords;curCoords=temp}return travelled}},{"@turf/distance":4,"@turf/helpers":5}],8:[function(require,module,exports){module.exports.RADIUS=6378137;module.exports.FLATTENING=1/298.257223563;module.exports.POLAR_RADIUS=6356752.3142},{}]},{},[1])(1)});
